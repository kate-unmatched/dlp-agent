# train_file_classifier.py

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib
import os

# –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
MODEL_OUTPUT_PATH = os.path.join("ml", "file_content_model.pkl")

# –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É —Å —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
DATASET_PATH = "datasets/file_dataset.csv"  # –æ–∂–∏–¥–∞–µ—Ç—Å—è CSV: text, label


def train_model():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv(DATASET_PATH)
    if "text" not in df.columns or "label" not in df.columns:
        raise ValueError("–û–∂–∏–¥–∞—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏ 'text' –∏ 'label' –≤ —Ñ–∞–π–ª–µ CSV")

    # –î–µ–ª–∏–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(
        df["text"], df["label"], test_size=0.2, random_state=42, stratify=df["label"]
    )

    # –°–æ–∑–¥–∞—ë–º –ø–∞–π–ø–ª–∞–π–Ω TF-IDF + RandomForest
    pipeline = Pipeline([
        ("tfidf", TfidfVectorizer(max_features=3000, ngram_range=(1, 2))),
        ("clf", RandomForestClassifier(n_estimators=100, random_state=42))
    ])

    # –û–±—É—á–µ–Ω–∏–µ
    pipeline.fit(X_train, y_train)

    # –û—Ü–µ–Ω–∫–∞
    y_pred = pipeline.predict(X_test)
    print("\nüìä –û—Ç—á—ë—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n")
    print(classification_report(y_test, y_pred))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    joblib.dump(pipeline, MODEL_OUTPUT_PATH)
    print(f"\n‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {MODEL_OUTPUT_PATH}")


if __name__ == "__main__":
    train_model()
